/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10    // default: 10

/ {
    macros {
        prev_word: prev_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>
                     , <&macro_tap &kp LEFT>
                     , <&macro_release &kp LCTRL>;
        };

        next_word: next_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>
                     , <&macro_tap &kp RIGHT>
                     , <&macro_release &kp LCTRL>;
        };
        // Line start (equivalent to QMK's LSTRT)
        line_start: line_start {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp HOME>;
        };

        // Line end (equivalent to QMK's LEND)
        line_end: line_end {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp END>;
        };
        // Browser back (equivalent to QMK's WBAK)
        browser_back: browser_back {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LALT>
                     , <&macro_tap &kp LEFT>
                     , <&macro_release &kp LALT>;
        };

        // Browser forward (equivalent to QMK's WFWD)
        browser_forward: browser_forward {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LALT>
                     , <&macro_tap &kp RIGHT>
                     , <&macro_release &kp LALT>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  | ; : | BKSP |
            // | ESC  |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  | '    |
            // | SHFT |  X  |  C  |  D  |  V  |  Z  |   |  /  |  K   |  H  |  ,  |  .  | DEL  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W         &kp F         &kp P         &kp B           &kp J     &kp L         &kp U         &kp Y         &kp SEMI  &kp SQT
&kp ESC    &kp A  &hm LCTRL R   &hm LALT S    &hm LSHFT T   &hm LGUI G      &hm RGUI M &hm RSHFT N  &hm RALT E    &hm RCTRL I   &kp O     &kp BSPC
&kp LSHFT  &kp X  &kp C         &kp D         &kp V         &kp Z           &kp FSLH  &kp K         &kp H         &kp COMMA     &kp DOT   &kp DEL
                                &kp LGUI      &kp SPACE     &mo 1           &mo 2     &kp RET      &none
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     | L4   |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT | L5  | ALT |

            bindings = <
&kp TAB   &kp TILDE &kp KP_PLUS     &kp KP_MINUS    &kp KP_MULTIPLY  &kp KP_SLASH      &kp DLLR     &kp LT        &kp PIPE       &kp GT        &kp GRAVE  &kp EQUAL
&kp ESC   &kp N1    &hm LCTRL N2    &hm LALT N3     &hm LSHFT N4     &hm LGUI N5       &hm RGUI N6  &hm RSHFT N7  &hm RALT N8    &hm RCTRL N9  &kp N0     &kp BSPC
&none     &kp UNDER &kp LBKT        &kp LBRC        &kp KP_LPAR      &kp EQUAL         &kp BSLH     &kp RPAR      &kp RBRC       &kp RBKT      &kp AT     &kp DEL
                                    &mo 3           &kp SPACE        &trans            &none   &kp RET    &none
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  L4  |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI | L5  | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp PG_UP    &prev_word   &kp UP           &next_word  &none  &none
&kp LCTRL  &none    &none  &none    &none    &none            &kp PG_DN    &kp LEFT     &kp DOWN         &kp RIGHT  &none  &none
&kp LSHFT  &none    &none  &none    &none    &none            &line_start  &line_end    &browser_back    &browser_forward  &none &none
                             &none    &none     &none         &trans       &kp RET      &none
            >;
        };

        function_layer {
            // -----------------------------------------------------------------------------------------
            // | F12  | F1  | F2  | F3  | F4  | F5  |   | F6  | F7  | F8  | F9  | F10 | F11  |
            // | CAPS |     |     |     |     |     |   |HOME | PGDN| PGUP| END |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F12    &kp F1  &kp F2  &kp F3  &kp F4  &kp F5     &kp F6    &kp F7     &kp F8     &kp F9   &kp F10  &kp F11
&bt BT_CLR       &bt BT_SEL 0     &bt BT_SEL 1    &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &none
&rgb_ug RGB_EFF  &ext_power EP_TOG  &rgb_ug RGB_ON  &rgb_ug RGB_OFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI    &kp HOME  &kp PG_DN  &kp PG_UP  &kp END  &trans   &kp CAPS
                           &trans  &trans  &trans     &trans    &trans     &trans
            >;
        };

        media_layer {
            // -----------------------------------------------------------------------------------------
            // |      |     |     |     |     |     |   | MUTE| VOL-| VOL+| PREV| NEXT| PLAY |
            // |      |     |     |     |     |     |   | BR- | BR+ |     |     |     |      |
            // |      |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &none  &none  &none  &none  &kp C_BRI_UP     &msc SCRL_UP    &mkp LCLK        &mmv MOVE_UP        &mkp RCLK            &none     &none
&none  &none  &none  &none  &none  &kp C_BRI_DN     &msc SCRL_DOWN  &mmv MOVE_LEFT   &mmv MOVE_DOWN      &mmv MOVE_RIGHT      &none     &none
&none  &none  &none  &none  &none  &kp C_MUTE       &kp C_VOL_DN    &kp C_VOL_UP     &kp C_PREV          &kp C_NEXT           &kp C_PP  &none
                        &none  &none  &none         &none           &none        &none
          >;
        };
    };
};
